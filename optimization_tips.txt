1. 定义在全局范围内的代码要比定义在函数中的代码执行慢. 因此脚本首先应该考虑写成函数再调用执行

2. 选择性地减少属性的访问. 当使用(.)操作符去访问属性时会带来一定的消耗. 从本质上讲,这会触发一些特殊方法的执行,比如__getattribute__()和__getattr__(),这通常都会导致内存中字典数据的查询__getattr__(),这通常都会导致内存中字典数据的查询. 有两种方式可以避免属性的访问. 第一种是frome module import name的方式;第二种是将对象的方法名保存下来,在调用时直接使用.该优化只能针对经常运行的代码有效.

3. 避免不必要的抽象. 任何时候当你想给你的代码添加其他处理逻辑,比如添加装饰器,属性或是属性符,你都是在拖慢你的程序

4. 使用内置的容器. 内置的数据结构,例如字符串(string),元组(tuple),列表(list),集合(set)以及字典(dict)都是用C语言实现的,所以它们的性能表现很好.没必要自己实现类似的数据结构

5. 避免不要的数据结构或是数据拷贝.


